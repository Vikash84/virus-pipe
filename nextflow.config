

params {

	outdir = "results"

	run_name = false

	filter_dir = false
	bloomfilter_host = false
	bloomfilter_target = "${baseDir}/assets/bloomfilter/covid19.bf"

	mn_ref = false
	nc_ref = false

	reference = false

	filter_options = "-i '%QUAL>=20'"

	assemble = false
	iva_guided = false

	pathoscope_index_dir = false

	align = false

	kraken2_db = false

	email = false
	logo = "${baseDir}/assets/ikmblogo.png"

}

manifest {
        version = "1.0"
        description = "IKMB Virus Pipeline"
        author = "Marc Hoeppner"
        homePage = "https://github.com/ikmb/virus-pipe"
        nextflowVersion = "20.01.0"
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_dag.svg"
}

profiles {
        standard {
                includeConfig 'conf/base.config'
                includeConfig 'conf/medcluster.config'
        }
	test {
                includeConfig 'conf/base.config'
                includeConfig 'conf/test.config'
	}
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 250.GB
  max_cpus = 24
  max_time = 240.h
  maxMultiqcEmailFileSize = 25.MB

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


